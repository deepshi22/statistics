{"title":"test","markdown":{"yaml":{"title":"test","author":"Deepshika Saravanan","date":"2024-05-06","output":"html_document"},"headingText":"R Markdown","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r}\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\ndata <- read.csv(\"C:\\\\Users\\\\Dell\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\ndata$Flooding <- as.numeric(as.factor(data$Flooding))\n\n# Handling NA values\ndata <- na.omit(data)\n\n# Using cor.test to determine the correlation\ncor_test <- cor.test(data$Drainage, data$Flooding)\nprint(cor_test)\n```\nThe Pearson correlation coefficient between the 'Drainage' and 'Flooding' columns in your dataset is approximately 0.625, indicating a moderate positive correlation. This suggests that as drainage characteristics of the soil increase (presumably indicating better drainage capacity), the occurrence of flooding also increases. This result might seem counterintuitive at first glance; however, it could indicate that areas classified with better drainage are also those where water accumulates quickly, thus making them prone to flooding under certain conditions.\n\nInterpretation and Next Steps:\nStatistical Significance: The p-value is less than 0.05 (actually, it's much smaller than that), indicating that the correlation is statistically significant, and the likelihood that this correlation is due to random chance is very low.\nPractical Significance: While statistically significant, the strength of the correlation (moderate) suggests that while there is a relationship, other factors also significantly influence the presence of flooding. It's important to consider these factors in any risk assessment or land use planning.\nFurther Analysis: Investigating how other variables interact with 'Drainage' and 'Flooding' could provide deeper insights. For instance, soil texture, slope, and capability class could be influencing how quickly water is absorbed or runs off, affecting flooding.\n\n\n```{r}\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\ncolnames(data)\n# Handling NA values - assuming you're interested in predicting 'Flooding'\ndata_clean <- na.omit(data[, c(\"Flooding\", \"Drainage\", \"Texture\", \"Soil.Slope\", \"Capability.Class..FM5.CAP.\")])\ndata_clean$Texture <- as.numeric(as.factor(data_clean$Texture))\n\n\n\n# Convert all categorical variables to factor type\ndata_clean$Capability_Class <- as.factor(data_clean$\"Capability.Class..FM5.CAP.\")\n\n\n# Fit Random Forest model\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)\n\n# Print model summary\nprint(rf_model)\n\n# Plot importance of variables\nvarImpPlot(rf_model)\n```\nThese plots are key to understanding which predictors are most influential in modeling the outcome (in your case, flooding).\n\nInterpretation of the Variable Importance Plots:\n%IncMSE: This plot shows the increase in Mean Squared Error (MSE) of the model when each variable is randomly shuffled. A higher value indicates that the model relies more on that variable for prediction, meaning the variable is more important. According to your graph, 'Drainage' seems to be the most important predictor, followed by 'Capability_Class' and 'Texture'.\nIncNodePurity: This measure is based on the total decrease in node impurities from splitting on the variable, averaged over all trees. Node impurity is typically measured by the RSS (regression) or Gini impurity (classification). In this graph, 'Capability_Class' contributes most to node purity, followed by 'Drainage' and 'Texture'. This suggests that 'Capability_Class' is particularly effective at creating homogeneous nodes, likely due to its role in determining soil usability.\n\n#Investigating interaction effects between predictors like 'Drainage' and 'Texture' in the context of their impact on flooding can provide deeper insights into how these variables jointly influence the outcome. In R, you can include interaction terms directly in your model formula to study these effects. Here, we'll look at two approaches: using multiple regression to evaluate the statistical significance of the interaction, and using a Random Forest model to assess the predictive power when interactions are considered.\n\nR Code for Multiple Regression with Interaction Terms\nWe'll modify the linear regression model to include an interaction term between 'Drainage' and 'Texture'. This will allow us to see if the effect of one variable on flooding depends on the level of the other variable.\n```{r}\n# Load necessary library\nlibrary(stats)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric\ndata$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed\n\n# Fit Multiple Regression Model with Interaction Term\nmodel_interaction <- lm(Flooding ~ Drainage * Texture, data = data)\n\n# Summary of the model to see coefficients and significance\nsummary(model_interaction)\n```\nInterpretation of the Regression Output\nCoefficients:\nIntercept (-0.349160): This represents the baseline value of flooding when both 'Drainage' and 'Texture' are at their reference levels (typically zero in numerical coding).\nDrainage (0.229149): This coefficient indicates that for each unit increase in drainage (without considering the impact of texture), flooding increases by approximately 0.229 units, holding other factors constant.\nTexture (0.294757): Similarly, for each unit increase in texture, flooding increases by approximately 0.295 units, holding other factors constant.\nDrainage:Texture Interaction (-0.020150): The negative interaction term suggests that the combined effect of 'Drainage' and 'Texture' on flooding is less than the sum of their individual effects. In other words, higher levels of one may slightly mitigate the influence of the other on flooding.\nStatistical Significance:\nAll predictors, including the interaction term, are highly statistically significant (p < 0.001), indicating strong evidence against the null hypothesis of no effect.\nModel Fit:\nResidual Standard Error (RSE) (0.6614): This measures the typical size of the residuals, and in your context, it implies that the standard deviation of the residuals is around 0.661 units.\nMultiple R-squared (0.5791): Approximately 57.91% of the variability in flooding is explained by the model, which is a decent level of explanatory power for natural science data.\nAdjusted R-squared (0.576): Slightly adjusted for the number of predictors, still indicating a good fit.\nResiduals:\nThe spread of residuals suggests that while the model fits well for many observations (median close to zero), there are outliers and some predictions that deviate significantly from the actual values, as indicated by the min and max residuals.\n\n#R Code for Random Forest with Feature Engineering\nRandom Forest inherently considers interactions among features, but we can explicitly engineer an interaction feature to see how it influences model performance.\n\n```{r}\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\n\n# Prepare the data\ndata <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)\n\n# Fit Random Forest Model including the engineered interaction feature\nset.seed(123)  # for reproducibility\nrf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)\n\n# Evaluate the model (assuming Flooding is continuous; adjust as necessary)\nprint(rf_model_interaction)\n\n# Optionally, view the importance of the new interaction feature\nimportance(rf_model_interaction)\n```\n\nInterpretation of the Random Forest Model Results:\nModel Performance:\nMean of squared residuals (0.1969851): This value is considerably lower than the residual standard error from the linear regression model (0.6614), suggesting that the Random Forest model has better predictive accuracy.\n% Var explained (80.86%): A high percentage of variance explained indicates that the Random Forest model is effectively capturing the relationships and variability in the data. It explains more than 80% of the variance in flooding, which is significantly higher than the Multiple R-squared from the linear regression model (57.91%).\nFeature Importance:\nDrainage: Importance score of 115.0117, suggesting it's a significant predictor of flooding.\nTexture: Importance score of 121.6274, slightly more influential than 'Drainage'.\nDrainage_Texture_Interaction: With the highest importance score of 131.4226, this engineered feature seems to be the most significant predictor in the model. This underscores the value of including interaction terms explicitly, even in a model like Random Forest that inherently accounts for interactions among features.\nComparison and Conclusion:\nExplanatory Power: The linear regression model provides clear coefficients that describe the relationship between each predictor and the outcome, including how the interaction term modifies these relationships. This is particularly useful for hypothesis testing and understanding the specific effects of changes in predictors.\nPredictive Accuracy: The Random Forest model outperforms the linear regression in terms of predictive accuracy, explaining a higher percentage of the variance in flooding and producing a lower mean squared residual.\nFeature Importance: Random Forest offers an advantage in evaluating the importance of features, including interactions, without needing a specific hypothesis about their effects.\n\n\n# Cross-Validation and Residual Analysis\n1. Cross-Validation for Linear Regression and Random Forest\n```{r}\n# Load necessary libraries\nlibrary(caret)\nlibrary(randomForest)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\n\n# Define training control\ntrain_control <- trainControl(method = \"cv\", number = 10)  # 10-fold cross-validation\n\n# Fit Linear Regression Model using cross-validation\nlm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"lm\", trControl = train_control)\n\n# Fit Random Forest Model using cross-validation\nrf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"rf\", trControl = train_control, ntree = 500)\n\n# Summary of cross-validation results\nprint(lm_model_cv)\nprint(rf_model_cv)\n```\nThe cross-validation results for both the Linear Regression and Random Forest models provide a clear comparison of their performance:\n\nLinear Regression Model:\nRMSE (Root Mean Squared Error): 0.6608545\nR-squared: 0.5871187\nMAE (Mean Absolute Error): 0.4143339\nThese metrics indicate that the linear regression model explains about 58.71% of the variance in the data. The RMSE and MAE values provide a measure of the average error in the predictions.\n\nRandom Forest Model:\nRMSE: 0.4282331\nR-squared: 0.8134469\nMAE: 0.1653817\nOptimal mtry: 2\nThe Random Forest model significantly outperforms the Linear Regression in all the metrics. It explains approximately 81.34% of the variance in the data, and both its RMSE and MAE are lower, indicating more accurate predictions.\n\n# Diagnostic Plots for Linear Regression\n```{r}\n# Fit the linear model\nlm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)\n\n# Diagnostic plots\npar(mfrow = c(2, 2))\nplot(lm_model)\n```\nThe diagnostic plots for your linear regression model provide valuable insights into how well the model meets the assumptions necessary for optimal performance. Here's an interpretation of each plot:\n\n1. Residuals vs Fitted\nThis plot helps check for non-linearity and heteroscedasticity (unequal variance of residuals).\n\nObservations: The residuals do not appear to display any clear pattern, which is good for linearity. However, there is a slight \"fanning\" effect where the spread of residuals increases with fitted values, suggesting potential heteroscedasticity.\nAction: Consider transformations of the dependent variable or use heteroscedasticity-consistent standard errors if this model will be used for inferential purposes.\n2. Normal Q-Q\nThis plot shows if the residuals are normally distributed—a key assumption of linear regression.\n\nObservations: Most points lie on the line, but there are deviations at the tails (both lower and upper ends), indicating slight departures from normality.\nAction: This is generally not severe unless very precise estimates are required. For more robustness, consider using non-parametric bootstrapping techniques to estimate standard errors.\n3. Scale-Location (or Spread-Location)\nThis plot checks if residuals are spread equally along the ranges of predictors (homoscedasticity).\n\nObservations: The red line (a loess fit) shows a trend, which suggests that residuals have non-constant variance across the range of fitted values.\nAction: This supports the earlier suggestion of possible heteroscedasticity. Transformations or robust regression methods might be needed.\n4. Residuals vs Leverage\nThis plot helps to identify influential cases that might have an unduly large effect on the model estimate.\n\nObservations: Most data points have low leverage, but there are a few points well outside the Cook's distance lines (notably the points labeled 7280 and 4430).\nAction: Investigate these points further to determine if they are outliers or influential points due to data entry errors or other reasons. Consider removing or adjusting these points if they are deemed to be errors.\nConclusion\nThe diagnostic plots indicate that while the model does not suffer from severe issues, there are indications of potential heteroscedasticity and some influence from outliers or high-leverage points.\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## R Markdown\n```{r}\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\ndata <- read.csv(\"C:\\\\Users\\\\Dell\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\ndata$Flooding <- as.numeric(as.factor(data$Flooding))\n\n# Handling NA values\ndata <- na.omit(data)\n\n# Using cor.test to determine the correlation\ncor_test <- cor.test(data$Drainage, data$Flooding)\nprint(cor_test)\n```\nThe Pearson correlation coefficient between the 'Drainage' and 'Flooding' columns in your dataset is approximately 0.625, indicating a moderate positive correlation. This suggests that as drainage characteristics of the soil increase (presumably indicating better drainage capacity), the occurrence of flooding also increases. This result might seem counterintuitive at first glance; however, it could indicate that areas classified with better drainage are also those where water accumulates quickly, thus making them prone to flooding under certain conditions.\n\nInterpretation and Next Steps:\nStatistical Significance: The p-value is less than 0.05 (actually, it's much smaller than that), indicating that the correlation is statistically significant, and the likelihood that this correlation is due to random chance is very low.\nPractical Significance: While statistically significant, the strength of the correlation (moderate) suggests that while there is a relationship, other factors also significantly influence the presence of flooding. It's important to consider these factors in any risk assessment or land use planning.\nFurther Analysis: Investigating how other variables interact with 'Drainage' and 'Flooding' could provide deeper insights. For instance, soil texture, slope, and capability class could be influencing how quickly water is absorbed or runs off, affecting flooding.\n\n\n```{r}\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\ncolnames(data)\n# Handling NA values - assuming you're interested in predicting 'Flooding'\ndata_clean <- na.omit(data[, c(\"Flooding\", \"Drainage\", \"Texture\", \"Soil.Slope\", \"Capability.Class..FM5.CAP.\")])\ndata_clean$Texture <- as.numeric(as.factor(data_clean$Texture))\n\n\n\n# Convert all categorical variables to factor type\ndata_clean$Capability_Class <- as.factor(data_clean$\"Capability.Class..FM5.CAP.\")\n\n\n# Fit Random Forest model\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)\n\n# Print model summary\nprint(rf_model)\n\n# Plot importance of variables\nvarImpPlot(rf_model)\n```\nThese plots are key to understanding which predictors are most influential in modeling the outcome (in your case, flooding).\n\nInterpretation of the Variable Importance Plots:\n%IncMSE: This plot shows the increase in Mean Squared Error (MSE) of the model when each variable is randomly shuffled. A higher value indicates that the model relies more on that variable for prediction, meaning the variable is more important. According to your graph, 'Drainage' seems to be the most important predictor, followed by 'Capability_Class' and 'Texture'.\nIncNodePurity: This measure is based on the total decrease in node impurities from splitting on the variable, averaged over all trees. Node impurity is typically measured by the RSS (regression) or Gini impurity (classification). In this graph, 'Capability_Class' contributes most to node purity, followed by 'Drainage' and 'Texture'. This suggests that 'Capability_Class' is particularly effective at creating homogeneous nodes, likely due to its role in determining soil usability.\n\n#Investigating interaction effects between predictors like 'Drainage' and 'Texture' in the context of their impact on flooding can provide deeper insights into how these variables jointly influence the outcome. In R, you can include interaction terms directly in your model formula to study these effects. Here, we'll look at two approaches: using multiple regression to evaluate the statistical significance of the interaction, and using a Random Forest model to assess the predictive power when interactions are considered.\n\nR Code for Multiple Regression with Interaction Terms\nWe'll modify the linear regression model to include an interaction term between 'Drainage' and 'Texture'. This will allow us to see if the effect of one variable on flooding depends on the level of the other variable.\n```{r}\n# Load necessary library\nlibrary(stats)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric\ndata$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed\n\n# Fit Multiple Regression Model with Interaction Term\nmodel_interaction <- lm(Flooding ~ Drainage * Texture, data = data)\n\n# Summary of the model to see coefficients and significance\nsummary(model_interaction)\n```\nInterpretation of the Regression Output\nCoefficients:\nIntercept (-0.349160): This represents the baseline value of flooding when both 'Drainage' and 'Texture' are at their reference levels (typically zero in numerical coding).\nDrainage (0.229149): This coefficient indicates that for each unit increase in drainage (without considering the impact of texture), flooding increases by approximately 0.229 units, holding other factors constant.\nTexture (0.294757): Similarly, for each unit increase in texture, flooding increases by approximately 0.295 units, holding other factors constant.\nDrainage:Texture Interaction (-0.020150): The negative interaction term suggests that the combined effect of 'Drainage' and 'Texture' on flooding is less than the sum of their individual effects. In other words, higher levels of one may slightly mitigate the influence of the other on flooding.\nStatistical Significance:\nAll predictors, including the interaction term, are highly statistically significant (p < 0.001), indicating strong evidence against the null hypothesis of no effect.\nModel Fit:\nResidual Standard Error (RSE) (0.6614): This measures the typical size of the residuals, and in your context, it implies that the standard deviation of the residuals is around 0.661 units.\nMultiple R-squared (0.5791): Approximately 57.91% of the variability in flooding is explained by the model, which is a decent level of explanatory power for natural science data.\nAdjusted R-squared (0.576): Slightly adjusted for the number of predictors, still indicating a good fit.\nResiduals:\nThe spread of residuals suggests that while the model fits well for many observations (median close to zero), there are outliers and some predictions that deviate significantly from the actual values, as indicated by the min and max residuals.\n\n#R Code for Random Forest with Feature Engineering\nRandom Forest inherently considers interactions among features, but we can explicitly engineer an interaction feature to see how it influences model performance.\n\n```{r}\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\n\n# Prepare the data\ndata <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)\n\n# Fit Random Forest Model including the engineered interaction feature\nset.seed(123)  # for reproducibility\nrf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)\n\n# Evaluate the model (assuming Flooding is continuous; adjust as necessary)\nprint(rf_model_interaction)\n\n# Optionally, view the importance of the new interaction feature\nimportance(rf_model_interaction)\n```\n\nInterpretation of the Random Forest Model Results:\nModel Performance:\nMean of squared residuals (0.1969851): This value is considerably lower than the residual standard error from the linear regression model (0.6614), suggesting that the Random Forest model has better predictive accuracy.\n% Var explained (80.86%): A high percentage of variance explained indicates that the Random Forest model is effectively capturing the relationships and variability in the data. It explains more than 80% of the variance in flooding, which is significantly higher than the Multiple R-squared from the linear regression model (57.91%).\nFeature Importance:\nDrainage: Importance score of 115.0117, suggesting it's a significant predictor of flooding.\nTexture: Importance score of 121.6274, slightly more influential than 'Drainage'.\nDrainage_Texture_Interaction: With the highest importance score of 131.4226, this engineered feature seems to be the most significant predictor in the model. This underscores the value of including interaction terms explicitly, even in a model like Random Forest that inherently accounts for interactions among features.\nComparison and Conclusion:\nExplanatory Power: The linear regression model provides clear coefficients that describe the relationship between each predictor and the outcome, including how the interaction term modifies these relationships. This is particularly useful for hypothesis testing and understanding the specific effects of changes in predictors.\nPredictive Accuracy: The Random Forest model outperforms the linear regression in terms of predictive accuracy, explaining a higher percentage of the variance in flooding and producing a lower mean squared residual.\nFeature Importance: Random Forest offers an advantage in evaluating the importance of features, including interactions, without needing a specific hypothesis about their effects.\n\n\n# Cross-Validation and Residual Analysis\n1. Cross-Validation for Linear Regression and Random Forest\n```{r}\n# Load necessary libraries\nlibrary(caret)\nlibrary(randomForest)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\n\n# Define training control\ntrain_control <- trainControl(method = \"cv\", number = 10)  # 10-fold cross-validation\n\n# Fit Linear Regression Model using cross-validation\nlm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"lm\", trControl = train_control)\n\n# Fit Random Forest Model using cross-validation\nrf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"rf\", trControl = train_control, ntree = 500)\n\n# Summary of cross-validation results\nprint(lm_model_cv)\nprint(rf_model_cv)\n```\nThe cross-validation results for both the Linear Regression and Random Forest models provide a clear comparison of their performance:\n\nLinear Regression Model:\nRMSE (Root Mean Squared Error): 0.6608545\nR-squared: 0.5871187\nMAE (Mean Absolute Error): 0.4143339\nThese metrics indicate that the linear regression model explains about 58.71% of the variance in the data. The RMSE and MAE values provide a measure of the average error in the predictions.\n\nRandom Forest Model:\nRMSE: 0.4282331\nR-squared: 0.8134469\nMAE: 0.1653817\nOptimal mtry: 2\nThe Random Forest model significantly outperforms the Linear Regression in all the metrics. It explains approximately 81.34% of the variance in the data, and both its RMSE and MAE are lower, indicating more accurate predictions.\n\n# Diagnostic Plots for Linear Regression\n```{r}\n# Fit the linear model\nlm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)\n\n# Diagnostic plots\npar(mfrow = c(2, 2))\nplot(lm_model)\n```\nThe diagnostic plots for your linear regression model provide valuable insights into how well the model meets the assumptions necessary for optimal performance. Here's an interpretation of each plot:\n\n1. Residuals vs Fitted\nThis plot helps check for non-linearity and heteroscedasticity (unequal variance of residuals).\n\nObservations: The residuals do not appear to display any clear pattern, which is good for linearity. However, there is a slight \"fanning\" effect where the spread of residuals increases with fitted values, suggesting potential heteroscedasticity.\nAction: Consider transformations of the dependent variable or use heteroscedasticity-consistent standard errors if this model will be used for inferential purposes.\n2. Normal Q-Q\nThis plot shows if the residuals are normally distributed—a key assumption of linear regression.\n\nObservations: Most points lie on the line, but there are deviations at the tails (both lower and upper ends), indicating slight departures from normality.\nAction: This is generally not severe unless very precise estimates are required. For more robustness, consider using non-parametric bootstrapping techniques to estimate standard errors.\n3. Scale-Location (or Spread-Location)\nThis plot checks if residuals are spread equally along the ranges of predictors (homoscedasticity).\n\nObservations: The red line (a loess fit) shows a trend, which suggests that residuals have non-constant variance across the range of fitted values.\nAction: This supports the earlier suggestion of possible heteroscedasticity. Transformations or robust regression methods might be needed.\n4. Residuals vs Leverage\nThis plot helps to identify influential cases that might have an unduly large effect on the model estimate.\n\nObservations: Most data points have low leverage, but there are a few points well outside the Cook's distance lines (notably the points labeled 7280 and 4430).\nAction: Investigate these points further to determine if they are outliers or influential points due to data entry errors or other reasons. Consider removing or adjusting these points if they are deemed to be errors.\nConclusion\nThe diagnostic plots indicate that while the model does not suffer from severe issues, there are indications of potential heteroscedasticity and some influence from outliers or high-leverage points.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"toc":true,"output-file":"influence.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","theme":"flatly","page-layout":"full","title":"test","author":"Deepshika Saravanan","date":"2024-05-06"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}